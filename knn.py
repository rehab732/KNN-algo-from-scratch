# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZSpzW-XFGfH9R6xxdV4pP6IVhJT8Ut3_
"""

def accuracy(ypred,ytrain):
  sum=0
  for i,label in enumerate(ypred):
    if(label==ytrain[i]):
      sum+=1
  print(f"accuracy={(sum/len(ypred))*100}%")
  print(f"number of true labels {sum} from {len(ypred)}")

def dist(point1, point2):
  sum=0 
  for i in range(len(point1)):
      sum+=(point1[i]-point2[i])**2
  return sum**0.5

def major(neaighbour):
  unacc=0
  acc=0
  good=0
  vgood=0
  for i in neaighbour:
    if(i[1]=="unacc"):
      unacc+=1
    elif(i[1]=="acc"):
      acc+=1  
    elif(i[1]=="good"):
      good+=1 
    else:
      vgood+=1
  if(unacc>acc and unacc>good and unacc>vgood):
    return "unacc"
  if(acc>unacc and acc>good and acc>vgood):
    return "acc"
  if(good>acc and good>unacc and good>vgood):
    return "good"
  else:
    return "vgood"

def Knn(Xtrain,Ytrain,Xtest,n=4):
  distAll=[]
  Ypred=[]
  for i in Xtest:
    distPoint=[]
    for j,point in enumerate(Xtrain):
      distPoint.append((dist(i,point),Ytrain[j]))
      distPoint.sort(key=lambda y: y[0])
    predict=major(distPoint[0:n])
    Ypred.append(predict)  
    distAll.append((Xtest,predict))  
  return  distAll ,Ypred

def util_catogery(data,categories):
  for i in range(data.shape[0]):
   for j in range(data.shape[1]-1):
     data[i,j]=categories[j][data[i,j]]
  return data

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

categories={
    0:{'high':3 ,'low':1 ,'med':2 ,'vhigh':4},
    1:{'high':3 ,'low':1 ,'med':2 ,'vhigh':4},
    2:{'2':2 ,'3':3 ,'4':4, '5more':5},
    3:{'2':1 ,'4':2 ,'more':3},
    4:{'big':3, 'med':2, 'small':1},
    5:{'high':3, 'low':1 ,'med':2}
}

df = pd.read_csv('car_data.csv',encoding_errors='ignore').to_numpy()

data=util_catogery(df,categories)

X_train, X_test, y_train, y_test = train_test_split(df[:,:-1],df[:,-1], test_size=0.25, random_state=42)

all,ypred=Knn(X_train,y_train,X_test)

accuracy(ypred,y_test)